#!/bin/bash
#===============================================================================
:<<LICENSE

    Copyright 2007-2012 Christopher Barry <christopher.r.barry@gmail.com>

    This file is part of the bash-color-tools

    bash-color-tools is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

LICENSE

#===============================================================================
# face
#-------------------------------------------------------------------------------
# face is a colorizing echo command/lib for bash
#===============================================================================

(( ${BASH_VERSINFO:-0} >= 4 )) || {
    echo "Sorry, gotta have bash version >= 4 to run this."
    exit 1
}

PREFIX=/usr/share

#-------------------------------------------------------------------------------
# Usage
function face_usage()
{
    echo >&2 "USAGE:"
    echo >&2 " face <[OPTS] 'string'>|<libmode>|<[-v] colors>"
    echo >&2
    echo >&2 " face <-h|-H>"
    echo >&2
    echo >&2 " face <[-P] [-l] [-n] [-e] \\"
    echo >&2 "           [-f <color-name>|<face-rgb>|<hex-rgb>|<dec-rgb>] \\"
    echo >&2 "           [-b <color-name>|<face-rgb>|<hex-rgb>|<dec-rgb>] 'message'>"
    echo >&2
    echo >&2 " face <[-v] colors>"
    echo >&2
    echo >&2 " source /path/to/face <libmode>"
    echo >&2
    echo >&2 " use: 'face -h and -H' for color echo command help and usage"
    echo >&2 " use: 'source /path/to/face libmode' to use _face function in scripts"
    echo >&2 " use: 'face [-v] colors' to print color pallettes, and optionally their rgb values"
}
function face_help()
{
    [[ -f ${PREFIX}/doc/bash-color-tools/man/face ]] && {
        less ${PREFIX}/doc/bash-color-tools/man/face
    } || {
        echo >&2 "Full help file missing."
        echo >&2 "${PREFIX}/doc/bash-color-tools/man/face not found."
        face_usage
    }
}

#-------------------------------------------------------------------------------
# color echo function
function _face()
{
    OPTIND=
    while getopts ":HPb:ef:hln" opt
    do
        case ${opt} in
            H) face_help;  exit 1          ;; # verbose help
            P) local PS1_mode=1            ;; # use additional escapes for prompt mode
            b) local -l bg_color=${OPTARG} ;; # background color rgb/name
            e) local E=e                   ;; # process escapes codes in the  message
            f) local -l fg_color=${OPTARG} ;; # foreground color rgb/name
            h) face_usage; exit 1          ;; # basic help
            l) local mode=lowcolor         ;; # low-color mode
            n) local N=n                   ;; # no newline
            *) :                           ;; # ignore unknown params
        esac
    done

    # reset to normal
    shift $((${OPTIND}-1))
    [[ ${PS1_mode} ]] && {
        # for PS1
        local norm="\[\033[0m\]"; echo -n "${norm}"
    } || {
        # for color echoing
        local norm="\033[0m"; echo -ne "${norm}"
    }

    case ${mode} in

        lowcolor) # low-color mode: console mode w/o framebuffer requires this mode [-l]

            [[ ${PS1_mode} ]] && {

                # for PS1 prompt strings
                # forground
                local -A foreground_color_names=(
                    [white]='\[\033[1;37m\]'  [black]='\[\033[0;30m\]'
                    [gray]='\[\033[1;30m\]'   [brightgray]='\[\033[0;37m\]'
                    [red]='\[\033[0;31m\]'    [brightred]='\[\033[1;31m\]'
                    [green]='\[\033[0;32m\]'  [brightgreen]='\[\033[1;32m\]'
                    [yellow]='\[\033[0;33m\]' [brightyellow]='\[\033[1;33m\]'
                    [blue]='\[\033[0;34m\]'   [brightblue]='\[\033[1;34m\]'
                    [purple]='\[\033[0;35m\]' [brightpurple]='\[\033[1;35m\]'
                    [cyan]='\[\033[0;36m\]'   [brightcyan]='\[\033[1;36m\]'
                    [none]='\[\033[0;37m\]'
                )
                # background
                local -A background_color_names=(
                    [white]='\[\033[47m\]'    [black]='\[\033[40m\]'
                    [red]='\[\033[41m\]'      [green]='\[\033[42m\]'
                    [yellow]='\[\033[43m\]'   [blue]='\[\033[44m\]'
                    [purple]='\[\033[45m\]'   [cyan]='\[\033[46m\]'
                    [none]='\[\033[40m\]'
                )

            } || {

                # for color echoing
                # forground
                local -A foreground_color_names=(
                    [white]='\033[1;37m'      [black]='\033[0;30m'
                    [gray]='\033[1;30m'       [brightgray]='\033[0;37m'
                    [red]='\033[0;31m'        [brightred]='\033[1;31m'
                    [green]='\033[0;32m'      [brightgreen]='\033[1;32m'
                    [yellow]='\033[0;33m'     [brightyellow]='\033[1;33m'
                    [blue]='\033[0;34m'       [brightblue]='\033[1;34m'
                    [purple]='\033[0;35m'     [brightpurple]='\033[1;35m'
                    [cyan]='\033[0;36m'       [brightcyan]='\033[1;36m'
                    [none]='\033[0;37m'
                )
                # background
                local -A background_color_names=(
                    [white]='\033[47m'        [black]='\033[40m'
                    [red]='\033[41m'          [green]='\033[42m'
                    [yellow]='\033[43m'       [blue]='\033[44m'
                    [purple]='\033[45m'       [cyan]='\033[46m'
                    [none]='\033[40m'
                )
            }

            [[ ${fg_color} ]] && [[ "${!foreground_color_names[@]}" =~ (^|[\ ]*)${fg_color}($|[\ ]*) ]] && fg="${foreground_color_names[${fg_color}]}"
            [[ ${bg_color} ]] && [[ "${!background_color_names[@]}" =~ (^|[\ ]*)${bg_color}($|[\ ]*) ]] && bg="${background_color_names[${bg_color}]}"
            [[ ${bg_color} ]] || bg="${background_color_names[none]}"

            # setup low colors for next print
            [[ ${PS1_mode} ]] && {
                # for PS1
                echo -n "${fg}${bg}"
            } || {
                # for color echoing
                echo -ne "${fg}${bg}"
            }

            ;;

        *) #-------------------------------------------------------------------------------
           # default high-color mode: requires an xterm or framebuffer

            # check for the color name hash
            [[ ${FACECOLORS[salmon]} ]] || {
                source ${PREFIX}/bash-color-tools/libexec/facecolors.rgb
            }

            function hex2rgb()
            {
                local r=${1:0:2} g=${1:2:2} b=${1:4:2}
                r=$(( ( 0x${r} / 42 ) - 1 )); [[ ${r} -lt 0 ]] && r=0
                g=$(( ( 0x${g} / 42 ) - 1 )); [[ ${g} -lt 0 ]] && g=0
                b=$(( ( 0x${b} / 42 ) - 1 )); [[ ${b} -lt 0 ]] && b=0
                echo ${r}${g}${b}
            }

            function dec2rgb()
            {
                local rgb=( ${1//,/ } )
                local r="${rgb[0]}" g="${rgb[1]}" b="${rgb[2]}"
                r=$(( ( ${r} / 42 ) - 1 )); [[ ${r} -lt 0 ]] && r=0
                g=$(( ( ${g} / 42 ) - 1 )); [[ ${g} -lt 0 ]] && g=0
                b=$(( ( ${b} / 42 ) - 1 )); [[ ${b} -lt 0 ]] && b=0
                echo ${r}${g}${b}
            }

            function convert2rgb()
            {
                local colorid=${1}
                # already in face rgb format, return
                [[ ${colorid} =~ ^[0-5]{3}$ ]] && { echo ${colorid}; return 0; }
                # in hex format, convert
                [[ ${colorid} =~ ^[0-9a-f]{6}$ ]] && { hex2rgb ${colorid}; return 0; }
                # in decimal format, convert
                [[ ${colorid} =~ ^[0-2][0-5]{2},[0-2][0-5]{2},[0-2][0-5]{2}$ ]] && { dec2rgb ${colorid}; return 0; }
                # in color name format, get from hash
                [[ "${!FACECOLORS[@]}" =~ (^|[\ ]*)${colorid}($|[\ ]*) ]] && { echo ${FACECOLORS[${colorid}]}; return 0; } || { echo 333; return 0; }
            }

            function rgb2idx() { echo -n "$((16+${1:0:1}*36+${1:1:1}*6+${1:2:1}))m"; }

            function color()
            {
                [[ ${PS1_mode} ]] && {
                    # for PS1
                    echo -n "\[\033[${1}8;5;$(rgb2idx ${2})\]"
                } || {
                    # for color echoing
                    echo -ne "\033[${1}8;5;$(rgb2idx ${2})"
                }
            }

            # setup high colors for next print
            local fg_idx=3 bg_idx=4
            [[ ${fg_color} ]] && color ${fg_idx} $(convert2rgb ${fg_color})
            [[ ${bg_color} ]] && color ${bg_idx} $(convert2rgb ${bg_color})

            ;;

    esac

    #---------------------------------------------------------------------------
    # print the text
    echo -n ${E:+ -${E}} "${*}"

    #---------------------------------------------------------------------------
    # reset to normal
    [[ ${PS1_mode} ]] && {
        # for PS1
        echo ${N:+ -${N}} "${norm}"
    } || {
        # for color echoing
        echo -e ${N:+ -${N}} "${norm}"
    }

    return 0
}


#===============================================================================
# use as lib, color pallette demo, or simple colorizing echo command
[[ "${1}" == "-v" ]] && { VERBOSE=1; shift; }
case "${1}" in

    "")
        face_usage
        ;;

    libmode)
        export -f _face
        [[ ${FACECOLORS[salmon]} ]] || {
            source ${PREFIX}/bash-color-tools/libexec/facecolors.rgb
        }
        ;;

    colors)
        [[ -f ${0%/*}/print-face-colors ]] && {
            CMD_NAME=colors
            source ${0%/*}/print-face-colors
            [[ $TERM == linux ]] && low_pallette || pallette
            :
        } || {
            echo >&2 "cannot locate: '${0%/*}/print-face-colors'"
            echo >&2 "this file is required to generate color pallettes"
            exit 1
        }
        ;;

    *)
        _face "${@}"
        ;;
esac
