# -*- mode: sh; -*-
#===============================================================================
:<<LICENSE

    Copyright 2007-2012 Christopher Barry <christopher.r.barry@gmail.com>

    This file is part of the bash-color-tools

    bash-color-tools is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

LICENSE

#===============================================================================
# PS1 vars
#-------------------------------------------------------------------------------
# Various generic PS1 components as vars available to all prompt themes
#===============================================================================

# prompt_xterm_set_titlebar
pxst='\[\033]0;\u@\h:\w\007\]'


#===============================================================================
# functions
#-------------------------------------------------------------------------------
# function lib available to all prompt themes
#===============================================================================

#===============================================================================
# prompt functions embedded in PS1 string, marked by a 'short alias'
#===============================================================================

#-------------------------------------------------------------------------------
# output the sized current directory
function prompt_get_pwd()
{
    prompt_truncate ${PROMPT_MAXPATHLEN:-20} "${PWD}"
}
# short alias
function pgp() { prompt_get_pwd "${@}"; }

#-------------------------------------------------------------------------------
# output the sized current directory
function prompt_get_fuzzy_pwd()
{
    [[ "${PWD}" =~ (^${HOME})(.*) ]] && {
        str="~${BASH_REMATCH[2]}"
    }
    prompt_fuzzy_truncate ${PROMPT_MAXPATHLEN:-20} ${PROMPT_DIR_FUZZFACTOR:-8} '/' "${str:-${PWD}}"
}
# short alias
function pgfp() { prompt_get_fuzzy_pwd "${@}"; }

#-------------------------------------------------------------------------------
# output a date/time string like: "09/02 17:53:13"
function prompt_date_time()
{
    date +%m"/"%d" "%T
}
# short alias
function pdt() { prompt_date_time; }


#===============================================================================
# utility functions used by other function lib functions - no aliases
#===============================================================================

#-------------------------------------------------------------------------------
# truncate the front of a string, returning the specified length prefixed by ...
# prompt_truncate <length> <"string">
function prompt_truncate()
{
    (( ${#} >= 2 )) || { echo "${FUNCNAME}: bad arglist: '${@}'"; return 1; }
    local len=${1}; shift
    local str="${*}"
    (( ${#str} <= ${len} )) || (( ${len} <= 0 )) && {
        echo "${str}"
    } || {
        echo "...${str: -${len}}"
    }
}

#-------------------------------------------------------------------------------
# fuzzily truncate based on delimiter, a max length and a fuzzy value
# the idea is to break on a delimiter if possible
function prompt_fuzzy_truncate()
{
    (( ${#} >= 3 )) || { echo "${FUNCNAME}: bad arglist: '${@}'"; return 1; }
    local -i maxlen=${1}
    local -i fuzzfactor=${2} # Mr. Sulu...
    local delim=${3}; shift 3
    local arg="${*}"

    local -i fuzzlow=$((  maxlen - fuzzfactor ))
    (( ${#arg} < ${fuzzlow} )) && fuzzlow=0
    local -i fuzzhigh=$(( maxlen + fuzzfactor ))

    # greater than maxlen? return immediately
    if (( ${#arg} <= ${maxlen} )); then
        echo "${arg}"
        return 0
    fi

    # pre-front-trim the string to fuzzhigh length
    (( ${#arg} < ${fuzzhigh} )) && fuzzhigh=${#arg}
    arg=${arg: -${fuzzhigh}}

    # walk right looking for delim
    for (( i = 0; i < ( ${#arg} - ${fuzzlow} ); i++ )); do
        [[ "${arg:$i:1}" == "${delim}" ]] && {
            echo "...${arg:$i}"
            return 0
        }
    done

    # if we get here, just dump it @ maxlen
    echo "...${arg: -${maxlen}}"

    return 0
}


#-------------------------------------------------------------------------------
# Utilities / prompt commands
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
function prompt_print_theme_list()
{
    echo
    _face -nf 012 "${1} "
    _face -f 111 "${2}"
    local -a p_theme=( $(ls -1 ${2} | grep -v conf) )
    (( ${#p_theme[@]} > 0 )) || p_theme=( 'none available' )
    printf "$(_face -f 013 "*") %s\n" "${p_theme[@]}"
}

#-------------------------------------------------------------------------------
# generate list of installed themes
function prompt_theme_list()
{
    _face -f 030 "Current:"
    _face -nf 030 "*"; _face -f 030 " ${THEME:-none active}"

    [[ -d ~/.prompt-themes.d ]] && {
        prompt_print_theme_list "Personal:" ~/.prompt-themes.d/
    }
    [[ -d ${THEME_DIR} ]] && {
        prompt_print_theme_list "Standard:" "${THEME_DIR}/"
    } || return 1
    [[ -d ${THEME_DIR%/*}/contrib ]] && {
        prompt_print_theme_list "Contrib:" "${THEME_DIR%/*}/contrib/"
    }
    echo
    _face -f 222 "run: 'prompt <theme_name>' to set theme."
    _face -f 222 "run: 'prompt save' to set current theme as default."
    _face -f 222 "edit: ~/.prompt-themes.d/conf/<theme_name>.theme to customize theme colors"
    echo

    return 0
}

#-------------------------------------------------------------------------------
function prompt_save_to_bashrc()
{
    local inst_prefix=$(echo ${THEME_DIR} | sed 's,/share/bash-color-tools/themes,,')

    [[ $(grep 'source.*/face\ libmode' ~/.bashrc) ]] || {
        cat >> ~/.bashrc <<EOF
#
# source bash-color-tools libraries
# for prompt and _face() usage
BCT=${inst_prefix}/share/bash-color-tools/libexec
if [[ -f \${BCT}/face && -f \${BCT}/prompt ]]; then
    # source bash-color-tools libs
    source \${BCT}/face libmode
    source \${BCT}/prompt
fi
#prompt builtin

EOF
    }
    sed -i "s,^[ #]*prompt[[:blank:]][-a-zA-Z0-9._]*$,prompt ${THEME:-builtin},"  ~/.bashrc
}

