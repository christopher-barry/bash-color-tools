# -*- mode: sh; -*-
#===============================================================================
:<<LICENSE

    Copyright 2007-2012 Christopher Barry <christopher.r.barry@gmail.com>

    This file is part of the bash-color-tools

    bash-color-tools is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

LICENSE

#===============================================================================
# progit
#-------------------------------------------------------------------------------
# power user's git theme
#===============================================================================

THEME=progit

#===============================================================================
# 'prompt progit'
# when in a repository shows all relevent repo status indicators,
# including local:remote commit status in the branch field:
#  (cbarry@mybox)-[Index not updated:4|Deleted in tree:2|Untracked:7]
#  [master 3:0][.../src/apps/]::
# when outside a repository show time, date and 1, 5, and 15min load averages:
#  (cbarry@mybox)-(02:03 / Sun Jun 30)-(0.2|0.1|0.3)
#  [-][.../usr/local/sbin]::
function prompt_progit_theme()
{
    # override and customize defaults with dotfile
    [[ -f ~/.prompt-themes.d/conf/${THEME}.theme ]] || {
        mkdir -p ~/.prompt-themes.d/conf
        cat > ~/.prompt-themes.d/conf/${THEME}.theme <<EOF
# default ${THEME} theme settings for prompt
#
# max length of path to display
PROMPT_MAXPATHLEN=14

# amount of fuzz around max path length
# to allow cutting a path to land on a '/'
PROMPT_DIR_FUZZFACTOR=8

# max length of branch name to display
PROMPT_MAXBRANCHLEN=20

# amount of fuzz around max branch length
# to allow cutting a path to land on a 'delim'
PROMPT_BRANCH_FUZZFACTOR=4

# run 'face -v colors' for rgb pallette output
# to see what color == what rgb value
#
# default color name/rgb values for prompt elements
# for both the linux console and xterm
case \${TERM} in
    linux)
	PROMPT_AT_CLR=brightgray
	PROMPT_BRKT_CLR=cyan
	PROMPT_DASHSEP_CLR=cyan
	PROMPT_DASH_CLR=cyan
	PROMPT_DATE_CLR=brightcyan
	PROMPT_DIR_CLR=brightblue
	PROMPT_GITBRANCH_CLR=yellow
	PROMPT_HOST_CLR=gray
	PROMPT_LOADAVG_CLR=gray
	PROMPT_LOW_CLR=1
	PROMPT_PAREN_CLR=cyan
	PROMPT_SEP_CLR=brightgray
	PROMPT_SLASH_CLR=cyan
	PROMPT_STATUS_NUM_CLR=brightgray
	PROMPT_STATUS_TXT_CLR=gray
	PROMPT_TIME_CLR=brightcyan
	(( \$(id -u) == 0 )) && {
		PROMPT_SYM_CLR=brightyellow
		PROMPT_SYM_CHAR='# '
	} || {
		PROMPT_SYM_CLR=cyan
		PROMPT_SYM_CHAR=':: '
	}
	PROMPT_USER_CLR=\${PROMPT_SYM_CLR}
    ;;
    *)
	PROMPT_AT_CLR=432
	PROMPT_BRKT_CLR=122
	PROMPT_DASHSEP_CLR=122
	PROMPT_DASH_CLR=122
	PROMPT_DATE_CLR=035
	PROMPT_DIR_CLR=013
	PROMPT_GITBRANCH_CLR=420
	PROMPT_HOST_CLR=321
	PROMPT_LOADAVG_CLR=222
	PROMPT_PAREN_CLR=233
	PROMPT_SEP_CLR=122
	PROMPT_SLASH_CLR=122
	PROMPT_STATUS_NUM_CLR=221
	PROMPT_STATUS_TXT_CLR=110
	PROMPT_TIME_CLR=035
	(( \$(id -u) == 0 )) && {
		PROMPT_SYM_CLR=540
		PROMPT_SYM_CHAR='# '
	} || {
		PROMPT_SYM_CLR=122
		PROMPT_SYM_CHAR=':: '
	}
	PROMPT_USER_CLR=\${PROMPT_SYM_CLR}
    ;;
esac
# default prompt elements
PROMPT_LBRKT_CHAR='['
PROMPT_RBRKT_CHAR=']'
PROMPT_LPAREN_CHAR='('
PROMPT_RPAREN_CHAR=')'
PROMPT_DASH_CHAR='-'
PROMPT_SLASH_CHAR='/'
PROMPT_AT_CHAR='@'
PROMPT_SEP_CHAR='|'
PROMPT_BRANCH_DELIM='_'
PROMPT_NOGIT_CHAR='-'

EOF

       echo "edit ~/.prompt-themes.d/conf/${THEME}.theme to modify colors, etc."
    }
    source ~/.prompt-themes.d/conf/${THEME}.theme

    return 0
}

#-------------------------------------------------------------------------------
function prompt_git_fuzzy_branch()
{
    local -a loc_rem=()
    local gb=

    gb=$(git symbolic-ref HEAD 2>/dev/null)
    [[ ${gb} ]] && {
        gb=${gb##*/}
        loc_rem="$(git rev-list --left-right ${gb}...origin/${gb} --count)"
        prompt_fuzzy_truncate ${PROMPT_MAXBRANCHLEN} ${PROMPT_BRANCH_FUZZFACTOR} ${PROMPT_BRANCH_DELIM} "${gb} ${loc_rem//[[:blank:]]/:}"
    } || {
        prompt_fuzzy_truncate ${PROMPT_MAXBRANCHLEN} ${PROMPT_BRANCH_FUZZFACTOR} ${PROMPT_BRANCH_DELIM} "${PROMPT_NOGIT_CHAR}"
    }

    return 0
}
# short alias
function pgfb() { prompt_git_fuzzy_branch; }

#-------------------------------------------------------------------------------
function prompt_git_status()
{
    local XY X Y out
    while IFS='' read line; do
        XY="${line:0:2}"
        [[ "${XY:0:1}" == " " ]] && X="_" || X="${XY:0:1}"
        [[ "${XY:1:1}" == " " ]] && Y="_" || Y="${XY:1:1}"
        out+=( "${X}${Y}" )
    done < <(git status --porcelain 2>&1)
    echo "${out[@]}"
}
function pgs() { prompt_git_status; }

#===============================================================================
# from man git-status
:<<'DOCUMENT'
' ' = unmodified
 M  = modified
 A  = added
 D  = deleted
 R  = renamed
 C  = copied
 U  = updated but unmerged

X          Y     Meaning
-------------------------------------------------
          [MD]   not updated
M        [ MD]   updated in index
A        [ MD]   added to index
D         [ M]   deleted from index
R        [ MD]   renamed in index
C        [ MD]   copied in index
[MARC]           index and work tree matches
[ MARC]     M    work tree changed since index
[ MARC]     D    deleted in work tree
-------------------------------------------------
D           D    unmerged, both deleted
A           U    unmerged, added by us
U           D    unmerged, deleted by them
U           A    unmerged, added by them
D           U    unmerged, deleted by us
A           A    unmerged, both added
U           U    unmerged, both modified
-------------------------------------------------
?           ?    untracked
-------------------------------------------------
DOCUMENT
#===============================================================================

#-------------------------------------------------------------------------------
function prompt_git_status_dashboard()
{
    local -i not_updated updated_in_index added_to_index deleted_from_index renamed_in_index
    local -i copied_in_index index_and_work_tree_matches work_tree_changed_since_last_index
    local -i deleted_in_work_tree unmerged_both_deleted unmerged_added_by_us unmerged_deleted_by_them
    local -i unmerged_added_by_them unmerged_deleted_by_us unmerged_both_added unmerged_both_modified untracked
    local -i cnt dsh lavg
    local s=
    local -a dashboard=() loadavg=()

    len() { local t="$*"; echo ${#t}; }

    if git status -s &>/dev/null; then

        # parse the status, counting instances of each
        for s in $(prompt_git_status); do

            case ${s} in
                # normal status
                _[MD])    ((not_updated++)) ;;&
                M[_MD])   ((updated_in_index++)) ;;&
                A[_MD])   ((added_to_index++)) ;;&
                D[_M])    ((deleted_from_index++)) ;;&
                R[_MD])   ((renamed_in_index++)) ;;&
                C[_MD])   ((copied_in_index++)) ;;&
                [MARC]_)  ((index_and_work_tree_matches++)) ;;&
                [_MARC]M) ((work_tree_changed_since_index++)) ;;&
                [_MARC]D) ((deleted_in_work_tree++)) ;;&
                # merge status
                DD)       ((unmerged_both_deleted++)) ;;&
                AU)       ((unmerged_added_by_us++)) ;;&
                UD)       ((unmerged_deleted_by_them++)) ;;&
                UA)       ((unmerged_added_by_them++)) ;;&
                DU)       ((unmerged_deleted_by_us++)) ;;&
                AA)       ((unmerged_both_added++)) ;;&
                UU)       ((unmerged_both_modified++)) ;;&
                # untracked status
                \?\?)     ((untracked++)) ;;
            esac

        done

        # remote status element

        # normal dashboard elements
        [[ ${not_updated} -gt 0 ]]                   && dashboard+=("Index not updated:${not_updated}")
        [[ ${updated_in_index} -gt 0 ]]              && dashboard+=("Index updated:${updated_in_index}")
        [[ ${added_to_index} -gt 0 ]]                && dashboard+=("Added to index:${added_to_index}")
        [[ ${deleted_from_index} -gt 0 ]]            && dashboard+=("Deleted from index:${deleted_from_index}")
        [[ ${renamed_in_index} -gt 0 ]]              && dashboard+=("Renamed in index:${renamed_in_index}")
        [[ ${copied_in_index} -gt 0 ]]               && dashboard+=("Copied in index:${copied_in_index}")
        [[ ${index_and_work_tree_matches} -gt 0 ]]   && dashboard+=("Index and tree in sync:${index_and_work_tree_matches}")
        [[ ${work_tree_changed_since_index} -gt 0 ]] && dashboard+=("Tree changed:${work_tree_changed_since_index}")
        [[ ${deleted_in_work_tree} -gt 0 ]]          && dashboard+=("Deleted in tree:${deleted_in_work_tree}")
        # merge dashboard elements
        [[ ${unmerged_both_deleted} -gt 0 ]]         && dashboard+=("Both deleted:${unmerged_both_deleted}")
        [[ ${unmerged_added_by_us} -gt 0 ]]          && dashboard+=("Added here:${unmerged_added_by_us}")
        [[ ${unmerged_deleted_by_them} -gt 0 ]]      && dashboard+=("Deleted there:${unmerged_deleted_by_them}")
        [[ ${unmerged_added_by_them} -gt 0 ]]        && dashboard+=("Added there:${unmerged_added_by_them}")
        [[ ${unmerged_deleted_by_us} -gt 0 ]]        && dashboard+=("Deleted here:${unmerged_deleted_by_us}")
        [[ ${unmerged_both_added} -gt 0 ]]           && dashboard+=("Both added:${unmerged_both_added}")
        [[ ${unmerged_both_modified} -gt 0 ]]        && dashboard+=("Both modified:${unmerged_both_modified}")
        # untracked dashboard element
        [[ ${untracked} -gt 0 ]]                     && dashboard+=("Untracked:${untracked}")

    fi

    _face -${l}nf ${PROMPT_PAREN_CLR} "${PROMPT_LPAREN_CHAR}"
    _face -${l}nf ${PROMPT_USER_CLR} "${USER}"
    _face -${l}nf ${PROMPT_AT_CLR} "${PROMPT_AT_CHAR}"
    _face -${l}nf ${PROMPT_HOST_CLR} "$(hostname -s)"
    _face -${l}nf ${PROMPT_PAREN_CLR} "${PROMPT_RPAREN_CHAR}"
    _face -${l}nf ${PROMPT_DASH_CLR} "${PROMPT_DASH_CHAR}"
    [[ ${#dashboard[@]} -gt 0 ]] && {
        _face -${l}nf ${PROMPT_BRKT_CLR} "${PROMPT_LBRKT_CHAR}"
        for (( dsh=0; dsh<${#dashboard[@]}; dsh++ )); do
            [[ ${cnt} ]] && _face -${l}nf ${PROMPT_DASHSEP_CLR} "${PROMPT_SEP_CHAR}"
            _face -${l}nf ${PROMPT_STATUS_TXT_CLR} "${dashboard[dsh]%:*}:"
            _face -${l}nf ${PROMPT_STATUS_NUM_CLR} "${dashboard[dsh]#*:}"
            ((cnt++))
        done
        _face -${l}nf ${PROMPT_BRKT_CLR} "${PROMPT_RBRKT_CHAR}"
    } || {
        loadavg=($(</proc/loadavg))
        _face -${l}nf ${PROMPT_PAREN_CLR} "${PROMPT_LPAREN_CHAR}"
        _face -${l}nf ${PROMPT_TIME_CLR} "$(date '+%R')"
        _face -${l}nf ${PROMPT_SLASH_CLR} " ${PROMPT_SLASH_CHAR} "
        _face -${l}nf ${PROMPT_DATE_CLR} "$(date '+%a %b %d')"
        _face -${l}nf ${PROMPT_PAREN_CLR} "${PROMPT_RPAREN_CHAR}"
        _face -${l}nf ${PROMPT_DASH_CLR} "${PROMPT_DASH_CHAR}"
        _face -${l}nf ${PROMPT_PAREN_CLR} "${PROMPT_LPAREN_CHAR}"
        for (( lavg=0; lavg<3; lavg++ )); do
            [[ ${cnt} ]] && _face -${l}nf ${PROMPT_SEP_CLR} "${PROMPT_SEP_CHAR}"
            _face -${l}nf ${PROMPT_LOADAVG_CLR} "${loadavg[lavg]%:*}"
            ((cnt++))
        done
        _face -${l}nf ${PROMPT_PAREN_CLR} "${PROMPT_RPAREN_CHAR}"
    }

    return 0
}
# short alias
function pgsd() { prompt_git_status_dashboard; }

#-------------------------------------------------------------------------------
# init globals
prompt_progit_theme

# set colors
l=${PROMPT_LOW_CLR:+l}
lb="$(_face -P${l}nf ${PROMPT_BRKT_CLR} "${PROMPT_LBRKT_CHAR}")"
rb="$(_face -P${l}nf ${PROMPT_BRKT_CLR} "${PROMPT_RBRKT_CHAR}")"
lp="$(_face -P${l}nf ${PROMPT_PAREN_CLR} "${PROMPT_LPAREN_CHAR}")"
rp="$(_face -P${l}nf ${PROMPT_PAREN_CLR} "${PROMPT_RPAREN_CHAR}")"
da="$(_face -P${l}nf ${PROMPT_DASH_CLR} "${PROMPT_DASH_CHAR}")"
sl="$(_face -P${l}nf ${PROMPT_SLASH_CLR} "${PROMPT_SLASH_CHAR}")"
at="$(_face -P${l}nf ${PROMPT_AT_CLR} "${PROMPT_AT_CHAR}")"
se="$(_face -P${l}nf ${PROMPT_SEP_CLR} "${PROMPT_SEP_CHAR}")"
sc="$(_face -P${l}nf ${PROMPT_SYM_CLR} "${PROMPT_SYM_CHAR}")"

# the following arrays elements wrap the
# calculated values in color escape codes
h=(  $(_face -P${l}nf ${PROMPT_HOST_CLR} " ") )
tm=( $(_face -P${l}nf ${PROMPT_TIME_CLR} " ") )
dt=( $(_face -P${l}nf ${PROMPT_DATE_CLR} " ") )
b=(  $(_face -P${l}nf ${PROMPT_GITBRANCH_CLR} " ") )
d=(  $(_face -P${l}nf ${PROMPT_DIR_CLR} " ") )

# set the prompt
PS1="${xt[0]}\u@\H:\w${xt[1]}\[\$(pgsd)\]\n${lb}${b[0]}\$(pgfb)${b[1]}${rb}${lb}${d[0]}\$(pgfp)${d[1]}${rb}${sc}"
