# -*- mode: sh; -*-
#===============================================================================
:<<LICENSE

    Copyright 2007-2012 Christopher Barry <christopher.r.barry@gmail.com>

    This file is part of the bash-color-tools

    bash-color-tools is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

LICENSE

#===============================================================================
# progit
#-------------------------------------------------------------------------------
# power user's git theme
#===============================================================================

THEME=progit

#===============================================================================
# 'prompt progit'
# [master|v0.9,9-0-g005443d|?ACDMRU]
# [@mybox][.../src/apps/]::
function prompt_progit_theme()
{
    # override and customize defaults with dotfile
    [[ -f ~/.prompt-themes.d/conf/${THEME}.theme ]] || {
        mkdir -p ~/.prompt-themes.d/conf
        cat > ~/.prompt-themes.d/conf/${THEME}.theme <<EOF
# default ${THEME} theme settings for prompt
#
# max length of path to display
PROMPT_MAXPATHLEN=14

# amount of fuzz around max path length
# to allow cutting a path to land on a '/'
PROMPT_DIR_FUZZFACTOR=8

# max length of branch name to display
PROMPT_MAXBRANCHLEN=20

# amount of fuzz around max branch length
# to allow cutting a path to land on a 'delim'
PROMPT_BRANCH_FUZZFACTOR=4

# run 'face -v colors' for rgb pallette output
# to see what color == what rgb value
#
# default color rgb values for prompt elements
case \${TERM} in
    linux)
	PROMPT_LOW_CLR=1
	PROMPT_BRKT_CLR=cyan
	PROMPT_PAREN_CLR=cyan
	PROMPT_DASH_CLR=cyan
	PROMPT_SLASH_CLR=cyan
	PROMPT_AT_CLR=brightgray
	PROMPT_SEP_CLR=brightyellow
	PROMPT_GITBRANCH_CLR=yellow
	PROMPT_TIME_CLR=brightcyan
	PROMPT_DATE_CLR=brightcyan
	PROMPT_HOST_CLR=gray
	PROMPT_DIR_CLR=brightblue
	PROMPT_SYM_CLR=cyan
    ;;
    *)
	PROMPT_BRKT_CLR=122
	PROMPT_PAREN_CLR=233
	PROMPT_DASH_CLR=122
	PROMPT_SLASH_CLR=122
	PROMPT_AT_CLR=432
	PROMPT_SEP_CLR=444
	PROMPT_GITBRANCH_CLR=520
	PROMPT_TIME_CLR=035
	PROMPT_DATE_CLR=035
	PROMPT_HOST_CLR=321
	PROMPT_DIR_CLR=013
	PROMPT_SYM_CLR=122
    ;;
esac
# default prompt elements
PROMPT_LBRKT_CHAR='['
PROMPT_RBRKT_CHAR=']'
PROMPT_LPAREN_CHAR='('
PROMPT_RPAREN_CHAR=')'
PROMPT_DASH_CHAR='-'
PROMPT_SLASH_CHAR='/'
PROMPT_AT_CHAR='@'
PROMPT_SEP_CHAR='|'
PROMPT_BRANCH_DELIM='_'
PROMPT_NOGIT_CHAR='-'

(( \$(id -u) == 0 )) && {
    PROMPT_SYM_CLR=540
    PROMPT_SYM_CHAR='# '
} || {
    PROMPT_SYM_CHAR=':: '
}

EOF

       echo "edit ~/.prompt-themes.d/conf/${THEME}.theme to modify colors, etc."
    }
    source ~/.prompt-themes.d/conf/${THEME}.theme

    return 0
}
#
function prompt_git_fuzzy_branch()
{
    if [[ "$(git branch 2>/dev/null)" =~ [*][[:blank:]]([-a-zA-Z0-9_. ]+) ]]
    then
        gb="${BASH_REMATCH[1]}"
        prompt_fuzzy_truncate ${PROMPT_MAXBRANCHLEN} ${PROMPT_BRANCH_FUZZFACTOR} ${PROMPT_BRANCH_DELIM} "${gb}"
    else
        prompt_fuzzy_truncate ${PROMPT_MAXBRANCHLEN} ${PROMPT_BRANCH_FUZZFACTOR} ${PROMPT_BRANCH_DELIM} "${PROMPT_NOGIT_CHAR}"
    fi

    return 0
}
# short alias
function pgfb() { prompt_git_fuzzy_branch; }

function prompt_git_status()
{
    local XY X Y
    while IFS='' read line; do
        XY="${line:0:2}"
        [[ "${XY:0:1}" == " " ]] && X="_" || X="${XY:0:1}"
        [[ "${XY:1:1}" == " " ]] && Y="_" || Y="${XY:1:1}"
        echo "${X}${Y}"
    done < <(git status --porcelain 2>&1)
}
function pgs() { prompt_git_status; }

#
:<<EOF
' ' = unmodified
 M  = modified
 A  = added
 D  = deleted
 R  = renamed
 C  = copied
 U  = updated but unmerged

X          Y     Meaning
-------------------------------------------------
          [MD]   not updated
M        [ MD]   updated in index
A        [ MD]   added to index
D         [ M]   deleted from index
R        [ MD]   renamed in index
C        [ MD]   copied in index
[MARC]           index and work tree matches
[ MARC]     M    work tree changed since index
[ MARC]     D    deleted in work tree
-------------------------------------------------
D           D    unmerged, both deleted
A           U    unmerged, added by us
U           D    unmerged, deleted by them
U           A    unmerged, added by them
D           U    unmerged, deleted by us
A           A    unmerged, both added
U           U    unmerged, both modified
-------------------------------------------------
?           ?    untracked
-------------------------------------------------
EOF

function prompt_git_status_dashboard()
{
    local s= not_updated= updated_in_index= added_to_index= deleted_from_index= renamed_in_index=
    local copied_in_index= index_and_work_tree_matches= work_tree_changed_since_last_index=
    local deleted_in_work_tree= unmerged_both_deleted= unmerged_added_by_us= unmerged_deleted_by_them=
    local unmerged_added_by_them= unmerged_deleted_by_us= unmerged_both_added= unmerged_both_modified=
    local nui= uii= ati= dfi= rii= cii= wai= wch= wdl= dd= au= ud= ua= du= aa= uu= untracked=
    local -a ndash=() mdash=()
    local status_dash=

    if git status -s &>/dev/null; then

        # parse the status
        for s in $(prompt_git_status); do

            case ${s} in
                # normal status
                _[MD])    not_updated=$((${not_updated}+1)) ;;
                M[_MD])   updated_in_index=$((${updated_in_index}+1)) ;;
                A[_MD])   added_to_index=$((${added_to_index}+1)) ;;
                D[_M])    deleted_from_index=$((${deleted_from_index}+1)) ;;
                R[_MD])   renamed_in_index=$((${renamed_in_index}+1)) ;;
                C[_MD])   copied_in_index=$((${copied_in_index}+1)) ;;
                [MARC]_)  index_and_work_tree_matches=$((${index_and_work_tree_matches}+1)) ;;
                [_MARC]M) work_tree_changed_since_index=$((${work_tree_changed_since_index}+1)) ;;
                [_MARC]D) deleted_in_work_tree=$((${deleted_in_work_tree}+1)) ;;
                # merge status
                DD) unmerged_both_deleted=$((${unmerged_both_deleted}+1)) ;;
                AU) unmerged_added_by_us=$((${unmerged_added_by_us}+1)) ;;
                UD) unmerged_deleted_by_them=$((${unmerged_deleted_by_them}+1)) ;;
                UA) unmerged_added_by_them=$((${unmerged_added_by_them}+1)) ;;
                DU) unmerged_deleted_by_us=$((${unmerged_deleted_by_us}+1)) ;;
                AA) unmerged_both_added=$((${unmerged_both_added}+1)) ;;
                UU) unmerged_both_modified=$((${unmerged_both_modified}+1)) ;;
                # untracked status
                "??") untracked=$((${untracked}+1)) ;;
            esac

        done

        # normal dash
        [[ ${not_updated} -gt 0 ]]                   && nui="IN:${not_updated}"                   || nui=
        [[ ${updated_in_index} -gt 0 ]]              && uii="IU:${updated_in_index}"              || uii=
        [[ ${added_to_index} -gt 0 ]]                && ati="IA:${added_to_index}"                || ati=
        [[ ${deleted_from_index} -gt 0 ]]            && dfi="ID:${deleted_from_index}"            || dfi=
        [[ ${renamed_in_index} -gt 0 ]]              && rii="IR:${renamed_in_index}"              || rii=
        [[ ${copied_in_index} -gt 0 ]]               && cii="IC:${copied_in_index}"               || cii=
        [[ ${index_and_work_tree_matches} -gt 0 ]]   && wai="WI:${index_and_work_tree_matches}"   || wai=
        [[ ${work_tree_changed_since_index} -gt 0 ]] && wch="WN:${work_tree_changed_since_index}" || wch=
        [[ ${deleted_in_work_tree} -gt 0 ]]          && wdl="WD:${deleted_in_work_tree}"          || wdl=
        ndash=( ${nui} ${uii} ${ati} ${dfi} ${rii} ${dii} ${wai} ${wch} ${wdl} )
        [[ ${#ndash[@]} -gt 0 ]] && status_dash="[Status: $(echo "${ndash[*]}"|sed 's,\ \+,|,g')]"

        # merge dash
        [[ ${unmerged_both_deleted} -gt 0 ]]    && dd="DD:${unmerged_both_deleted}"    || dd=
        [[ ${unmerged_added_by_us} -gt 0 ]]     && au="AU:${unmerged_added_by_us}"     || au=
        [[ ${unmerged_deleted_by_them} -gt 0 ]] && ud="UD:${unmerged_deleted_by_them}" || ud=
        [[ ${unmerged_added_by_them} -gt 0 ]]   && ua="UA:${unmerged_added_by_them}"   || ua=
        [[ ${unmerged_deleted_by_us} -gt 0 ]]   && du="DU:${unmerged_deleted_by_us}"   || du=
        [[ ${unmerged_both_added} -gt 0 ]]      && aa="AA:${unmerged_both_added}"    || aa=
        [[ ${unmerged_both_modified} -gt 0 ]]   && uu="UU:${unmerged_both_modified}"   || uu=
        mdash=( ${dd} ${au} ${ud} ${ua} ${du} ${aa} ${uu} )
        [[ ${#mdash[@]} -gt 0 ]] && status_dash="${status_dash}[Merged: $(echo "${mdash[*]}"|sed 's,\ \+,|,g')]"

        # untracked dash
        [[ ${untracked} -gt 0 ]] && status_dash="${status_dash}[Untracked: ${untracked}]"

    fi

    _face -nf ${PROMPT_PAREN_CLR} "("
    _face -nf ${PROMPT_AT_CLR} "@"
    _face -nf ${PROMPT_HOST_CLR} "$(hostname -s)"
    _face -nf ${PROMPT_PAREN_CLR} ")"
    [[ ${status_dash} ]] && {
        _face -nf 222  " ${status_dash}"
    }

    return 0
}
# short alias
function pgsd() { prompt_git_status_dashboard; }


# init globals
prompt_giles_theme

# set colors
lb="$(_face -Pnf ${PROMPT_BRKT_CLR} "${PROMPT_LBRKT_CHAR}")"
rb="$(_face -Pnf ${PROMPT_BRKT_CLR} "${PROMPT_RBRKT_CHAR}")"
lp="$(_face -Pnf ${PROMPT_PAREN_CLR} "${PROMPT_LPAREN_CHAR}")"
rp="$(_face -Pnf ${PROMPT_PAREN_CLR} "${PROMPT_RPAREN_CHAR}")"
da="$(_face -Pnf ${PROMPT_DASH_CLR} "${PROMPT_DASH_CHAR}")"
sl="$(_face -Pnf ${PROMPT_SLASH_CLR} "${PROMPT_SLASH_CHAR}")"
at="$(_face -Pnf ${PROMPT_AT_CLR} "${PROMPT_AT_CHAR}")"
se="$(_face -Pnf ${PROMPT_SEP_CLR} "${PROMPT_SEP_CHAR}")"
sc="$(_face -Pnf ${PROMPT_SYM_CLR} "${PROMPT_SYM_CHAR}")"

# the following arrays elements wrap the
# calculated values in color escape codes
h=( $(_face -Pnf ${PROMPT_HOST_CLR} " ") )
tm=( $(_face -Pnf ${PROMPT_TIME_CLR} " ") )
dt=( $(_face -Pnf ${PROMPT_DATE_CLR} " ") )
b=( $(_face -Pnf ${PROMPT_GITBRANCH_CLR} " ") )
d=( $(_face -Pnf ${PROMPT_DIR_CLR} " ") )

# set the prompt
PS1="\[\$(pgsd)\]\n${lb}${b[0]}\$(pgfb)${b[1]}${rb}${lb}${d[0]}\$(pgfp)${d[1]}${rb}${sc}"
